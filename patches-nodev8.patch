diff --git a/node-v18.2.0/deps/v8/include/v8-internal.h b/node-v18.2.0/deps/v8/include/v8-internal.h
index e6e9cc5f..37d23f7f 100644
--- a/node-v18.2.0/deps/v8/include/v8-internal.h
+++ b/node-v18.2.0/deps/v8/include/v8-internal.h
@@ -13,6 +13,8 @@
 #include "v8-version.h"  // NOLINT(build/include_directory)
 #include "v8config.h"    // NOLINT(build/include_directory)
 
+struct IResizableRegionAllocator;
+
 namespace v8 {
 
 class Array;
@@ -24,6 +26,15 @@ class Local;
 
 namespace internal {
 
+extern IResizableRegionAllocator* v8RRA;
+enum class BoundsCheckingCode {
+  none,
+  alwaysTrap,
+  alwaysClamp,
+  trapIfNeeded
+};
+extern BoundsCheckingCode v8BoundsCheckingCode;
+
 class Isolate;
 
 typedef uintptr_t Address;
diff --git a/node-v18.2.0/deps/v8/src/compiler/wasm-compiler.cc b/node-v18.2.0/deps/v8/src/compiler/wasm-compiler.cc
index 0afc124e..c33b2dde 100644
--- a/node-v18.2.0/deps/v8/src/compiler/wasm-compiler.cc
+++ b/node-v18.2.0/deps/v8/src/compiler/wasm-compiler.cc
@@ -66,6 +66,9 @@
 
 namespace v8 {
 namespace internal {
+
+BoundsCheckingCode v8BoundsCheckingCode = BoundsCheckingCode::trapIfNeeded;
+
 namespace compiler {
 
 namespace {
@@ -3839,6 +3842,9 @@ WasmGraphBuilder::BoundsCheckMem(uint8_t access_size, Node* index,
 
   // If no bounds checks should be performed (for testing), just return the
   // converted index and assume it to be in-bounds.
+  if (v8BoundsCheckingCode == BoundsCheckingCode::none) {
+    return {index, kInBounds};
+  }
   if (env_->bounds_checks == wasm::kNoBoundsChecks) return {index, kInBounds};
 
   // The accessed memory is [index + offset, index + end_offset].
@@ -3861,7 +3867,7 @@ WasmGraphBuilder::BoundsCheckMem(uint8_t access_size, Node* index,
   }
 
   if (env_->bounds_checks == wasm::kTrapHandler &&
-      enforce_check == kCanOmitBoundsCheck) {
+      enforce_check == kCanOmitBoundsCheck && v8BoundsCheckingCode == BoundsCheckingCode::trapIfNeeded) {
     return {index, kTrapHandler};
   }
 
@@ -3879,6 +3885,10 @@ WasmGraphBuilder::BoundsCheckMem(uint8_t access_size, Node* index,
 
   // Introduce the actual bounds check.
   Node* cond = gasm_->UintLessThan(index, effective_size);
+  if (v8BoundsCheckingCode == BoundsCheckingCode::alwaysClamp) {
+    return {Select(cond, index, effective_size, (mcgraph()->machine()->Is32()) ? wasm::kWasmI32 : wasm::kWasmI64), kDynamicallyChecked};
+  }
+
   TrapIfFalse(wasm::kTrapMemOutOfBounds, cond, position);
   return {index, kDynamicallyChecked};
 }
diff --git a/node-v18.2.0/deps/v8/src/objects/backing-store.cc b/node-v18.2.0/deps/v8/src/objects/backing-store.cc
index 605f5aa0..47c90d5b 100644
--- a/node-v18.2.0/deps/v8/src/objects/backing-store.cc
+++ b/node-v18.2.0/deps/v8/src/objects/backing-store.cc
@@ -28,6 +28,8 @@
 namespace v8 {
 namespace internal {
 
+V8_EXPORT_PRIVATE IResizableRegionAllocator* v8RRA = nullptr;
+
 namespace {
 
 #if V8_ENABLE_WEBASSEMBLY
@@ -242,8 +244,9 @@ BackingStore::~BackingStore() {
         GetReservedRegion(has_guard_regions_, buffer_start_, byte_capacity_);
 
     if (!region.is_empty()) {
-      FreePages(page_allocator, reinterpret_cast<void*>(region.begin()),
-                region.size());
+      // FreePages(page_allocator, reinterpret_cast<void*>(region.begin()),
+      //           region.size());
+      v8RRA->freeRegion(reinterpret_cast<uint8_t*>(region.begin()), region.size());
     }
     Clear();
     return;
@@ -428,9 +431,9 @@ std::unique_ptr<BackingStore> BackingStore::TryAllocateAndPartiallyCommitMemory(
   auto allocate_pages = [&] {
 #ifdef V8_SANDBOX
     page_allocator = GetSandboxPageAllocator();
-    allocation_base = AllocatePages(page_allocator, nullptr, reservation_size,
-                                    page_size, PageAllocator::kNoAccess);
-    if (allocation_base) return true;
+    // allocation_base = AllocatePages(page_allocator, nullptr, reservation_size,
+    //                                 page_size, PageAllocator::kNoAccess);
+    // if (allocation_base) return true;
     // We currently still allow falling back to the platform page allocator if
     // the sandbox page allocator fails. This will eventually be removed.
     // TODO(chromium:1218005) once we forbid the fallback, we should have a
@@ -440,8 +443,9 @@ std::unique_ptr<BackingStore> BackingStore::TryAllocateAndPartiallyCommitMemory(
     if (!kAllowBackingStoresOutsideSandbox) return false;
     page_allocator = GetPlatformPageAllocator();
 #endif
-    allocation_base = AllocatePages(page_allocator, nullptr, reservation_size,
-                                    page_size, PageAllocator::kNoAccess);
+    // allocation_base = AllocatePages(page_allocator, nullptr, reservation_size,
+    //                                 page_size, PageAllocator::kNoAccess);
+    allocation_base = v8RRA->allocateRegion(0, reservation_size);
     return allocation_base != nullptr;
   };
   if (!gc_retry(allocate_pages)) {
@@ -467,9 +471,11 @@ std::unique_ptr<BackingStore> BackingStore::TryAllocateAndPartiallyCommitMemory(
   //--------------------------------------------------------------------------
   size_t committed_byte_length = initial_pages * page_size;
   auto commit_memory = [&] {
-    return committed_byte_length == 0 ||
-           SetPermissions(page_allocator, buffer_start, committed_byte_length,
-                          PageAllocator::kReadWrite);
+    v8RRA->resizeRegion((uint8_t*)allocation_base, 0, committed_byte_length + (guards ? kNegativeGuardSize : 0));
+    return true;
+    // return committed_byte_length == 0 ||
+    //        SetPermissions(page_allocator, buffer_start, committed_byte_length,
+    //                       PageAllocator::kReadWrite);
   };
   if (!gc_retry(commit_memory)) {
     TRACE_BS("BSw:try   failed to set permissions (%p, %zu)\n", buffer_start,
@@ -621,10 +627,12 @@ base::Optional<size_t> BackingStore::GrowWasmMemoryInPlace(Isolate* isolate,
     new_length = (current_pages + delta_pages) * wasm::kWasmPageSize;
 
     // Try to adjust the permissions on the memory.
-    if (!i::SetPermissions(GetPlatformPageAllocator(), buffer_start_,
-                           new_length, PageAllocator::kReadWrite)) {
-      return {};
-    }
+    // if (!i::SetPermissions(GetPlatformPageAllocator(), buffer_start_,
+    //                        new_length, PageAllocator::kReadWrite)) {
+    //   return {};
+    // }
+    size_t nGuard = has_guard_regions_ ? kNegativeGuardSize : 0;
+    v8RRA->resizeRegion((uint8_t*)buffer_start_ - nGuard, old_length, new_length);
     if (byte_length_.compare_exchange_weak(old_length, new_length,
                                            std::memory_order_acq_rel)) {
       // Successfully updated both the length and permissions.
diff --git a/node-v18.2.0/deps/v8/src/objects/backing-store.h b/node-v18.2.0/deps/v8/src/objects/backing-store.h
index 6fb1e5fc..0f3229dd 100644
--- a/node-v18.2.0/deps/v8/src/objects/backing-store.h
+++ b/node-v18.2.0/deps/v8/src/objects/backing-store.h
@@ -12,6 +12,8 @@
 #include "src/base/optional.h"
 #include "src/handles/handles.h"
 
+#include "src/vm-library/wasmbounds_rr.hpp"
+
 namespace v8 {
 namespace internal {
 
diff --git a/node-v18.2.0/deps/v8/src/vm-library/userfaultfd.h b/node-v18.2.0/deps/v8/src/vm-library/userfaultfd.h
new file mode 100644
index 00000000..8479af5f
--- /dev/null
+++ b/node-v18.2.0/deps/v8/src/vm-library/userfaultfd.h
@@ -0,0 +1,302 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+/*
+ *  include/linux/userfaultfd.h
+ *
+ *  Copyright (C) 2007  Davide Libenzi <davidel@xmailserver.org>
+ *  Copyright (C) 2015  Red Hat, Inc.
+ *
+ */
+
+#ifndef _LINUX_USERFAULTFD_H
+#define _LINUX_USERFAULTFD_H
+
+#include <linux/types.h>
+
+/*
+ * If the UFFDIO_API is upgraded someday, the UFFDIO_UNREGISTER and
+ * UFFDIO_WAKE ioctls should be defined as _IOW and not as _IOR.  In
+ * userfaultfd.h we assumed the kernel was reading (instead _IOC_READ
+ * means the userland is reading).
+ */
+#define UFFD_API ((__u64)0xAA)
+#define UFFD_API_REGISTER_MODES (UFFDIO_REGISTER_MODE_MISSING |	\
+				 UFFDIO_REGISTER_MODE_WP |	\
+				 UFFDIO_REGISTER_MODE_MINOR)
+#define UFFD_API_FEATURES (UFFD_FEATURE_PAGEFAULT_FLAG_WP |	\
+			   UFFD_FEATURE_EVENT_FORK |		\
+			   UFFD_FEATURE_EVENT_REMAP |		\
+			   UFFD_FEATURE_EVENT_REMOVE |		\
+			   UFFD_FEATURE_EVENT_UNMAP |		\
+			   UFFD_FEATURE_MISSING_HUGETLBFS |	\
+			   UFFD_FEATURE_MISSING_SHMEM |		\
+			   UFFD_FEATURE_SIGBUS |		\
+			   UFFD_FEATURE_THREAD_ID |		\
+			   UFFD_FEATURE_MINOR_HUGETLBFS |	\
+			   UFFD_FEATURE_MINOR_SHMEM)
+#define UFFD_API_IOCTLS				\
+	((__u64)1 << _UFFDIO_REGISTER |		\
+	 (__u64)1 << _UFFDIO_UNREGISTER |	\
+	 (__u64)1 << _UFFDIO_API)
+#define UFFD_API_RANGE_IOCTLS			\
+	((__u64)1 << _UFFDIO_WAKE |		\
+	 (__u64)1 << _UFFDIO_COPY |		\
+	 (__u64)1 << _UFFDIO_ZEROPAGE |		\
+	 (__u64)1 << _UFFDIO_WRITEPROTECT |	\
+	 (__u64)1 << _UFFDIO_CONTINUE)
+#define UFFD_API_RANGE_IOCTLS_BASIC		\
+	((__u64)1 << _UFFDIO_WAKE |		\
+	 (__u64)1 << _UFFDIO_COPY |		\
+	 (__u64)1 << _UFFDIO_CONTINUE)
+
+/*
+ * Valid ioctl command number range with this API is from 0x00 to
+ * 0x3F.  UFFDIO_API is the fixed number, everything else can be
+ * changed by implementing a different UFFD_API. If sticking to the
+ * same UFFD_API more ioctl can be added and userland will be aware of
+ * which ioctl the running kernel implements through the ioctl command
+ * bitmask written by the UFFDIO_API.
+ */
+#define _UFFDIO_REGISTER		(0x00)
+#define _UFFDIO_UNREGISTER		(0x01)
+#define _UFFDIO_WAKE			(0x02)
+#define _UFFDIO_COPY			(0x03)
+#define _UFFDIO_ZEROPAGE		(0x04)
+#define _UFFDIO_WRITEPROTECT		(0x06)
+#define _UFFDIO_CONTINUE		(0x07)
+#define _UFFDIO_API			(0x3F)
+
+/* userfaultfd ioctl ids */
+#define UFFDIO 0xAA
+#define UFFDIO_API		_IOWR(UFFDIO, _UFFDIO_API,	\
+				      struct uffdio_api)
+#define UFFDIO_REGISTER		_IOWR(UFFDIO, _UFFDIO_REGISTER, \
+				      struct uffdio_register)
+#define UFFDIO_UNREGISTER	_IOR(UFFDIO, _UFFDIO_UNREGISTER,	\
+				     struct uffdio_range)
+#define UFFDIO_WAKE		_IOR(UFFDIO, _UFFDIO_WAKE,	\
+				     struct uffdio_range)
+#define UFFDIO_COPY		_IOWR(UFFDIO, _UFFDIO_COPY,	\
+				      struct uffdio_copy)
+#define UFFDIO_ZEROPAGE		_IOWR(UFFDIO, _UFFDIO_ZEROPAGE,	\
+				      struct uffdio_zeropage)
+#define UFFDIO_WRITEPROTECT	_IOWR(UFFDIO, _UFFDIO_WRITEPROTECT, \
+				      struct uffdio_writeprotect)
+#define UFFDIO_CONTINUE		_IOWR(UFFDIO, _UFFDIO_CONTINUE,	\
+				      struct uffdio_continue)
+
+/* read() structure */
+struct uffd_msg {
+	__u8	event;
+
+	__u8	reserved1;
+	__u16	reserved2;
+	__u32	reserved3;
+
+	union {
+		struct {
+			__u64	flags;
+			__u64	address;
+			union {
+				__u32 ptid;
+			} feat;
+		} pagefault;
+
+		struct {
+			__u32	ufd;
+		} fork;
+
+		struct {
+			__u64	from;
+			__u64	to;
+			__u64	len;
+		} remap;
+
+		struct {
+			__u64	start;
+			__u64	end;
+		} remove;
+
+		struct {
+			/* unused reserved fields */
+			__u64	reserved1;
+			__u64	reserved2;
+			__u64	reserved3;
+		} reserved;
+	} arg;
+} __attribute__((packed));
+
+/*
+ * Start at 0x12 and not at 0 to be more strict against bugs.
+ */
+#define UFFD_EVENT_PAGEFAULT	0x12
+#define UFFD_EVENT_FORK		0x13
+#define UFFD_EVENT_REMAP	0x14
+#define UFFD_EVENT_REMOVE	0x15
+#define UFFD_EVENT_UNMAP	0x16
+
+/* flags for UFFD_EVENT_PAGEFAULT */
+#define UFFD_PAGEFAULT_FLAG_WRITE	(1<<0)	/* If this was a write fault */
+#define UFFD_PAGEFAULT_FLAG_WP		(1<<1)	/* If reason is VM_UFFD_WP */
+#define UFFD_PAGEFAULT_FLAG_MINOR	(1<<2)	/* If reason is VM_UFFD_MINOR */
+
+struct uffdio_api {
+	/* userland asks for an API number and the features to enable */
+	__u64 api;
+	/*
+	 * Kernel answers below with the all available features for
+	 * the API, this notifies userland of which events and/or
+	 * which flags for each event are enabled in the current
+	 * kernel.
+	 *
+	 * Note: UFFD_EVENT_PAGEFAULT and UFFD_PAGEFAULT_FLAG_WRITE
+	 * are to be considered implicitly always enabled in all kernels as
+	 * long as the uffdio_api.api requested matches UFFD_API.
+	 *
+	 * UFFD_FEATURE_MISSING_HUGETLBFS means an UFFDIO_REGISTER
+	 * with UFFDIO_REGISTER_MODE_MISSING mode will succeed on
+	 * hugetlbfs virtual memory ranges. Adding or not adding
+	 * UFFD_FEATURE_MISSING_HUGETLBFS to uffdio_api.features has
+	 * no real functional effect after UFFDIO_API returns, but
+	 * it's only useful for an initial feature set probe at
+	 * UFFDIO_API time. There are two ways to use it:
+	 *
+	 * 1) by adding UFFD_FEATURE_MISSING_HUGETLBFS to the
+	 *    uffdio_api.features before calling UFFDIO_API, an error
+	 *    will be returned by UFFDIO_API on a kernel without
+	 *    hugetlbfs missing support
+	 *
+	 * 2) the UFFD_FEATURE_MISSING_HUGETLBFS can not be added in
+	 *    uffdio_api.features and instead it will be set by the
+	 *    kernel in the uffdio_api.features if the kernel supports
+	 *    it, so userland can later check if the feature flag is
+	 *    present in uffdio_api.features after UFFDIO_API
+	 *    succeeded.
+	 *
+	 * UFFD_FEATURE_MISSING_SHMEM works the same as
+	 * UFFD_FEATURE_MISSING_HUGETLBFS, but it applies to shmem
+	 * (i.e. tmpfs and other shmem based APIs).
+	 *
+	 * UFFD_FEATURE_SIGBUS feature means no page-fault
+	 * (UFFD_EVENT_PAGEFAULT) event will be delivered, instead
+	 * a SIGBUS signal will be sent to the faulting process.
+	 *
+	 * UFFD_FEATURE_THREAD_ID pid of the page faulted task_struct will
+	 * be returned, if feature is not requested 0 will be returned.
+	 *
+	 * UFFD_FEATURE_MINOR_HUGETLBFS indicates that minor faults
+	 * can be intercepted (via REGISTER_MODE_MINOR) for
+	 * hugetlbfs-backed pages.
+	 *
+	 * UFFD_FEATURE_MINOR_SHMEM indicates the same support as
+	 * UFFD_FEATURE_MINOR_HUGETLBFS, but for shmem-backed pages instead.
+	 */
+#define UFFD_FEATURE_PAGEFAULT_FLAG_WP		(1<<0)
+#define UFFD_FEATURE_EVENT_FORK			(1<<1)
+#define UFFD_FEATURE_EVENT_REMAP		(1<<2)
+#define UFFD_FEATURE_EVENT_REMOVE		(1<<3)
+#define UFFD_FEATURE_MISSING_HUGETLBFS		(1<<4)
+#define UFFD_FEATURE_MISSING_SHMEM		(1<<5)
+#define UFFD_FEATURE_EVENT_UNMAP		(1<<6)
+#define UFFD_FEATURE_SIGBUS			(1<<7)
+#define UFFD_FEATURE_THREAD_ID			(1<<8)
+#define UFFD_FEATURE_MINOR_HUGETLBFS		(1<<9)
+#define UFFD_FEATURE_MINOR_SHMEM		(1<<10)
+	__u64 features;
+
+	__u64 ioctls;
+};
+
+struct uffdio_range {
+	__u64 start;
+	__u64 len;
+};
+
+struct uffdio_register {
+	struct uffdio_range range;
+#define UFFDIO_REGISTER_MODE_MISSING	((__u64)1<<0)
+#define UFFDIO_REGISTER_MODE_WP		((__u64)1<<1)
+#define UFFDIO_REGISTER_MODE_MINOR	((__u64)1<<2)
+	__u64 mode;
+
+	/*
+	 * kernel answers which ioctl commands are available for the
+	 * range, keep at the end as the last 8 bytes aren't read.
+	 */
+	__u64 ioctls;
+};
+
+struct uffdio_copy {
+	__u64 dst;
+	__u64 src;
+	__u64 len;
+#define UFFDIO_COPY_MODE_DONTWAKE		((__u64)1<<0)
+	/*
+	 * UFFDIO_COPY_MODE_WP will map the page write protected on
+	 * the fly.  UFFDIO_COPY_MODE_WP is available only if the
+	 * write protected ioctl is implemented for the range
+	 * according to the uffdio_register.ioctls.
+	 */
+#define UFFDIO_COPY_MODE_WP			((__u64)1<<1)
+	__u64 mode;
+
+	/*
+	 * "copy" is written by the ioctl and must be at the end: the
+	 * copy_from_user will not read the last 8 bytes.
+	 */
+	__s64 copy;
+};
+
+struct uffdio_zeropage {
+	struct uffdio_range range;
+#define UFFDIO_ZEROPAGE_MODE_DONTWAKE		((__u64)1<<0)
+	__u64 mode;
+
+	/*
+	 * "zeropage" is written by the ioctl and must be at the end:
+	 * the copy_from_user will not read the last 8 bytes.
+	 */
+	__s64 zeropage;
+};
+
+struct uffdio_writeprotect {
+	struct uffdio_range range;
+/*
+ * UFFDIO_WRITEPROTECT_MODE_WP: set the flag to write protect a range,
+ * unset the flag to undo protection of a range which was previously
+ * write protected.
+ *
+ * UFFDIO_WRITEPROTECT_MODE_DONTWAKE: set the flag to avoid waking up
+ * any wait thread after the operation succeeds.
+ *
+ * NOTE: Write protecting a region (WP=1) is unrelated to page faults,
+ * therefore DONTWAKE flag is meaningless with WP=1.  Removing write
+ * protection (WP=0) in response to a page fault wakes the faulting
+ * task unless DONTWAKE is set.
+ */
+#define UFFDIO_WRITEPROTECT_MODE_WP		((__u64)1<<0)
+#define UFFDIO_WRITEPROTECT_MODE_DONTWAKE	((__u64)1<<1)
+	__u64 mode;
+};
+
+struct uffdio_continue {
+	struct uffdio_range range;
+#define UFFDIO_CONTINUE_MODE_DONTWAKE		((__u64)1<<0)
+	__u64 mode;
+
+	/*
+	 * Fields below here are written by the ioctl and must be at the end:
+	 * the copy_from_user will not read past here.
+	 */
+	__s64 mapped;
+};
+
+/*
+ * Flags for the userfaultfd(2) system call itself.
+ */
+
+/*
+ * Create a userfaultfd that can handle page faults only in user mode.
+ */
+#define UFFD_USER_MODE_ONLY 1
+
+#endif /* _LINUX_USERFAULTFD_H */
diff --git a/node-v18.2.0/deps/v8/src/vm-library/wasmbounds_rr.h b/node-v18.2.0/deps/v8/src/vm-library/wasmbounds_rr.h
new file mode 100644
index 00000000..d3959898
--- /dev/null
+++ b/node-v18.2.0/deps/v8/src/vm-library/wasmbounds_rr.h
@@ -0,0 +1,11 @@
+#pragma once
+
+uint8_t *wasmboundsAllocateRegion(size_t rwSize, size_t maxSize,
+                                  size_t alignmentLog2
+#ifdef __cplusplus
+                                  = 12
+#endif
+);
+
+void wasmboundsFreeRegion(uint8_t *region, size_t size);
+void wasmboundsResizeRegion(uint8_t *region, size_t oldSize, size_t newSize);
diff --git a/node-v18.2.0/deps/v8/src/vm-library/wasmbounds_rr.hpp b/node-v18.2.0/deps/v8/src/vm-library/wasmbounds_rr.hpp
new file mode 100644
index 00000000..bd6f56e4
--- /dev/null
+++ b/node-v18.2.0/deps/v8/src/vm-library/wasmbounds_rr.hpp
@@ -0,0 +1,39 @@
+#pragma once
+// Wasmbounds Resizable Region API
+// Made to be integrated into each WASM VM, replacing its memory
+// allocation/deallocation for WASM memories.
+
+#include <cstdint>
+#include <cstdlib>
+#include <memory>
+
+// All functions must be thread-safe (use internal locking)
+struct IResizableRegionAllocator {
+  IResizableRegionAllocator() = default;
+  IResizableRegionAllocator(const IResizableRegionAllocator &) = delete;
+  virtual ~IResizableRegionAllocator() = default;
+
+  virtual uint8_t *allocateRegion(size_t rwSize, size_t maxSize,
+                                  size_t alignmentLog2 = 12) = 0;
+  virtual void freeRegion(uint8_t *region, size_t size) = 0;
+  // Returns old size
+  // As-if discards data if shrunk
+  // As-if zero-fills data if grown
+  virtual void resizeRegion(uint8_t *region, size_t oldSize,
+                            size_t newSize) = 0;
+};
+
+extern std::unique_ptr<IResizableRegionAllocator> resizableRegionAllocator;
+
+enum class RraType : uint32_t {
+  none = 0,
+  mprotect,
+  mdiscard,
+  uffd,
+};
+
+std::unique_ptr<IResizableRegionAllocator> makeRra(RraType type);
+
+extern "C" {
+#include "wasmbounds_rr.h"
+}
